
https://drive.google.com/drive/folders/1fwbIFfm3uzA5vnUGVs7KKsI2jRz8Q7hC

https://drive.google.com/drive/folders/1ykNhV0ctYTv-P3op_M3zuWCC57lfK_Ad

lilian.bravo@senaisp.edu.br

------------------------------------------------------------------ AULA 02 - 11.05.2021 -----------------------------------------------------------

if exists(select null from sys.databases where name = 'TESTE_IFI')
Drop database TESTE_IFI

CREATE DATABASE [TESTE_IFI]
CONTAINMENT = NONE
ON  PRIMARY
( NAME = N'TESTE_IFI',
FILENAME = N'C:\TEMP\TESTE_IFI.mdf' ,
SIZE = 20 GB , FILEGROWTH = 1024KB )
LOG ON ( NAME = N'TESTE_IFI_log',
FILENAME = N'C:\TEMP\TESTE_IFI_log.ldf' ,
SIZE = 1024KB , FILEGROWTH = 10%)
GO

-- View é uma estrutura lógica dentro do banco de dados;
-- Não existe fisicamente no banco de dados;
-- Trigger (gatilho) - acionar - Conjunto de comandos que podem ser procedures, funções ou um comando único de manipulação de dados, que será executado 
-- quando algo acontecer numa tabela;

USE [MASTER]

CREATE DATABASE BD_TESTE

CREATE DATABASE BD_TESTE2 
ON 
(NAME= TESTE2_DAT, 
	FILENAME = 'C:\ temp\data\teste2.mdf', 
	SIZE = 10, 
	MAXSIZE = 50, 
	FILEGROWTH=5)
LOG ON
(NAME = TESTE2_LOG, 
	FILENAME = 'C:\ temp\data\teste2.ldf', 
	SIZE = 10, 
	MAXSIZE = 50, 
	FILEGROWTH=5)

----------------------------------------- AULA03 - 12.05.2021 ---------------------------------------------------------------

CREATE TABLE [NOME DA TABELA] (
	[CAMPO1] [TIPO DE DADO],
	[CAMPO2] [TIPO DE DADO],
	[CAMPO3] [TIPO DE DADO],
	)

-- CRIAÇÃO DE BANCOS PARA O CLIENTE ESQUINA DO SUCO

CREATE DATABASE BD_ESQUINA_VENDAS

CREATE TABLE TABELA_CADASTRO_CLIENTE
	(
		[CPF][VARCHAR] (11),
		[NOME] [VARCHAR](100),
		[ENDERECO] [VARCHAR] (150),
		[COMPLEMENTO] [VARCHAR] (100),
		[BAIRRO] [VARCHAR] (50),
		[CIDADE] [VARCHAR] (50),
		[ESTADO] [VARCHAR] (2),
		[CEP] [VARCHAR] (8),
		[DATA DE NASCIMENTO] [DATE],
		[IDADE] [SMALLINT],
		[SEXO] [VARCHAR] (1),
		[LIMETE DE CREDITO] [MONEY],
		[VOLUME DE COMPRA] [FLOAT],
		[PRIMEIRA COMPRA] [BIT]
	    )
	
CREATE TABLE TABELA_VENDEDORES
	(
		[MATRICULA] [VACHAR] (5),
		[NOME] [VACHAR] (100),
		[PERCENTUAL COMISSAO] [FLOAT],
		)

CREATE TABLE TABELA_PRODUTOS
	(
		[CODIGO_DO_PRODUTO]	[VACHAR] (10),
		[NOME_DO_PRODUTO] [VACHAR] (50),
		[EMBALEGEM] [VACHAR] (20),
		[TAMANHO] [VARBINARY] (20),
		[SABOR] [VACHAR] (20),
		[PREÇO_DE_LISTA] [SMALLMONEY],
		)
			
CREATE TABLE CADASTRO_DE_FUNCIONARIOS
	(
		[CODIGO] [INT],
		[PRIMEIRO_NOME] [VARCHAR](50),
		[SEGUNDO_NOME] [VARCHAR](50),
		[DATA_DE_NASCIMENTO] [DATE],
		[CPF][VARCHAR] (11),
		[RG][VARCHAR] (8),
		[CIDADE] [VARCHAR] (30),
		[TELEFONE] [VARCHAR] (20),
	    )
		
----------------------------------------------AULA04 - 13.05.2021---------------------------------------------------

--Incluindo dados - sintaxe

INSERT INTO [NOME DA TABELA]
	(
		[LISTA DE CAMPOS]
		)
VALEUS (LISTA DOS DADOS A INSERIR)

INSERT INTO TABELA_PRODUTOS
	(
		[CODIGO_DO_PRODUTO],[NOME_DO_PRODUTO], [EMBALEGEM],[TAMANHO],[SABOR],[PREÇO_DE_LISTA],
		)	
VALEUS ('1040107','Light - 350ml - Melancia', 'Lata', '350ml', 'Melancia',4.56)

-- Alterar registro na tabela - Sintaxe

UPDATE [NOME DA TABELA]
SET [CAMPO A SER ALTERADO] = "NOVO_VALOR"
WHERE [CONDIÇÃO]

UPDATE [TABELA_PRODUTOS]
SET [EMBALAGEM] = 'Lata', [PREÇO_DE_LISTA] = 2.46
WHERE [CODIGO_DO_PRODUTO] = '544931'

UPDATE [TABELA_PRODUTOS]
SET [EMBALAGEM] = 'Garrafa'
WHERE [CODIGO_DO_PRODUTO] = '1078680'

-- Deletar registro na tabela - Sintaxe

DELETE FROM [TABELA_PRODUTOS]
WHERE [CODIGO_DO_PRODUTO] = '1088126'

-------------------AULA05 - 14.05.2021 ----------------------------------------------------------------------------------------------------------

-- Chave Primária

INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PREÇO DE LISTA])
VALEUS ('788975', 'Pedaços de Frutas - 1,5 Litros - Maça', 'PET', '1,5 Litros', 'Maça', 18.01)

CREATE TABLE [TABELA_PRODUTOS]
	(
		[CODIGO_DO_PRODUTO] [VACHAR](10),
		[NOME_DO_PRODUTO] [VACHAR] (50),
		[EMBALAGEM] [VACHAR] (20),
		[TAMANHO] [VACHAR] (10),
		[SABOR] [VACHAR] (20),
		[PRECO_DE_LISTA] [SMALLMONEY],
		PRIMARY KEY ([CODIGO_DO_PRODUTO])
	    )

CREATE TABLE TABELA_CADASTRO_CLIENTE
	(
		[CPF][VARCHAR] (11),
		[NOME] [VARCHAR](100),
		[ENDERECO] [VARCHAR] (150),
		[COMPLEMENTO] [VARCHAR] (100),
		[BAIRRO] [VARCHAR] (50),
		[CIDADE] [VARCHAR] (50),
		[ESTADO] [VARCHAR] (2),
		[CEP] [VARCHAR] (8),
		[DATA DE NASCIMENTO] [DATE],
		[IDADE] [SMALLINT],
		[SEXO] [VARCHAR] (1),
		[LIMETE DE CREDITO] [MONEY],
		[VOLUME DE COMPRA] [FLOAT],
		[PRIMEIRA COMPRA] [BIT],
		PRIMARY KEY ([CPF])
	    )
		
------------------- AULA06 - 15.05.2021 ----------------------------------------------------------------------------------------------------------

--Imersão PROGRAMA DE IMERSÃO - SQLMOC COMMUNITY

CREATE DATABASE MOC;
GO
USE MOC
GO

CREATE TABLE CLIENTES
(
	Id_Cliente INT IDENTITY(1,1) PRIMARY KEY,
	Nome VARCHAR(100),
	Dat_Nasc DATE,
	Dat_Cadastro DATE
	);


INSERT INTO Clientes (Nome, Dat_Nasc, Dat_Cadastro) VALUES ('João Alberto', '1989-01-07','2020-01-01');
INSERT INTO Clientes (Nome, Dat_Nasc, Dat_Cadastro) VALUES ('Eliane Silva', '1970-02-15','2020-05-05');
INSERT INTO Clientes (Nome, Dat_Nasc, Dat_Cadastro) VALUES ('Mateus Henrique', '1982-04-30','2020-02-03');
INSERT INTO Clientes (Nome, Dat_Nasc, Dat_Cadastro) VALUES ('William Borges', '1976-12-10','2020-02-03');
INSERT INTO Clientes (Nome, Dat_Nasc, Dat_Cadastro) VALUES ('Maria do Carmo', '1980-11-15','2020-01-01');
INSERT INTO Clientes (Nome, Dat_Nasc, Dat_Cadastro) VALUES ('Roberta Piezek', '1990-07-09','2020-01-02');
INSERT INTO Clientes (Nome, Dat_Nasc, Dat_Cadastro) VALUES ('Carlos Menegueti', '1965-12-25','2020-02-08');
INSERT INTO Clientes (Nome, Dat_Nasc, Dat_Cadastro) VALUES ('Daniel Oliveira', '1980-09-11','2020-03-04');
INSERT INTO Clientes (Nome, Dat_Nasc, Dat_Cadastro) VALUES ('Francieli Jesus', '1987-10-14','2020-01-01');
INSERT INTO Clientes (Nome, Dat_Nasc, Dat_Cadastro) VALUES ('Renato Portaluppi', '1972-11-20','2020-03-04');
INSERT INTO Clientes (Nome, Dat_Nasc, Dat_Cadastro) VALUES ('Pedro Cabral', '1972-11-20','2020-03-04');

CREATE TABLE CATEGORIA
(
	Id_Categoria INT IDENTITY(1,1) PRIMARY KEY,
	Nome VARCHAR(100)
	);

INSERT INTO Categoria (Nome) VALUES ('Calçados');
INSERT INTO Categoria (Nome) VALUES ('Roupas');
INSERT INTO Categoria (Nome) VALUES ('Equipamentos');
INSERT INTO Categoria (Nome) VALUES ('Futebol');
INSERT INTO Categoria (Nome) VALUES ('Bikes');

INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Bola de Futsal 2020', '4', '65.90','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Bola de Futebol Campo UEFA', '4', '99.99','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Luva Goleiro Tamanho 7', '4', '55.00','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Caneleira M', '4', '15.50','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Mochila Academy', '3', '99.99','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Mala Active', '4', '179.99','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Par de Halteres', '4', '99.00','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Caixa de Som', '3', '249.90','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Bicicleta Aro 29 KSW Aluminio', '5', '1499.00','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Anilha de Ferro', '3', '109.90','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Lanterna Traseiro', '5', '9.48','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Suporte Veicular Smart', '3', '189.90','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Camisa Seleção Brasileira 2019', '2', '189.00','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Fone de Ouvido Sem Fio JBL', '3', '969.40','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Calça MXD', '2', '69.90','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Corda Speed Rope', '3', '24.90','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Camisa Polo Slim', '2', '189.99','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Bota Couro', '1', '239.99','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Pula Corda', '3', '23.90','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Buzina Fon-Fon', '5', '8.90','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Garrafa Squeeze', '5', '10.90','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Short Dri-Fit', '2', '99.99','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Chinelo Rider Full NBA', '1', '49.99','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Sapatilha Camurça', '1', '79.99','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Sapatênis Couro', '1', '99.99','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Manopla Strada', '5', '10.42','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Pedal Calypson', '5', '12.90','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Calça Térmica', '2', '89.90','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Bermuda Run', '2', '79.99','2020-01-01');
INSERT INTO Item (Nome, Id_Categoria, Pre_Unit, Dat_Cadastro) VALUES ('Camisa Real Madrid', '2', '179.99','2020-01-01');


CREATE TABLE ITEM
(
	Id_Item INT IDENTITY(1,1) PRIMARY KEY,
	Nome VARCHAR(200),
	Id_Categoria INT,
	Pre_Unit decimal(15,2),
	Dat_Cadastro DATE
	CONSTRAINT fk_Id_Categoria FOREIGN KEY (Id_Categoria) REFERENCES Categoria (Id_Categoria)
);


CREATE TABLE PEDIDOS
(
	Id_Pedido INT IDENTITY(1,1) PRIMARY KEY,
	Id_Cliente INT NOT NULL,
	Dat_Pedido DATE
	CONSTRAINT fk_Id_Cliente FOREIGN KEY (Id_Cliente) REFERENCES Clientes (Id_Cliente)
);

INSERT INTO Pedidos (Id_Cliente, Dat_pedido) VALUES ('10', '2020-02-05');
INSERT INTO Pedidos (Id_Cliente, Dat_pedido) VALUES ('1', '2020-02-05');
INSERT INTO Pedidos (Id_Cliente, Dat_pedido) VALUES ('3', '2020-02-06');
INSERT INTO Pedidos (Id_Cliente, Dat_pedido) VALUES ('4', '2020-02-06');
INSERT INTO Pedidos (Id_Cliente, Dat_pedido) VALUES ('2', '2020-02-06');
INSERT INTO Pedidos (Id_Cliente, Dat_pedido) VALUES ('5', '2020-02-09');
INSERT INTO Pedidos (Id_Cliente, Dat_pedido) VALUES ('6', '2020-02-09');
INSERT INTO Pedidos (Id_Cliente, Dat_pedido) VALUES ('2', '2020-02-10');
INSERT INTO Pedidos (Id_Cliente, Dat_pedido) VALUES ('1', '2020-02-10');
INSERT INTO Pedidos (Id_Cliente, Dat_pedido) VALUES ('9', '2020-02-10');
INSERT INTO Pedidos (Id_Cliente, Dat_pedido) VALUES ('10', '2020-02-10');
INSERT INTO Pedidos (Id_Cliente, Dat_pedido) VALUES ('4', '2020-02-11');
INSERT INTO Pedidos (Id_Cliente, Dat_pedido) VALUES ('8', '2020-02-12');
INSERT INTO Pedidos (Id_Cliente, Dat_pedido) VALUES ('2', '2020-02-12');
INSERT INTO Pedidos (Id_Cliente, Dat_pedido) VALUES ('4', '2020-02-15');
INSERT INTO Pedidos (Id_Cliente, Dat_pedido) VALUES ('6', '2020-02-15');
INSERT INTO Pedidos (Id_Cliente, Dat_pedido) VALUES ('7', '2020-02-15');
INSERT INTO Pedidos (Id_Cliente, Dat_pedido) VALUES ('9', '2020-02-15');
INSERT INTO Pedidos (Id_Cliente, Dat_pedido) VALUES ('8', '2020-02-15');
INSERT INTO Pedidos (Id_Cliente, Dat_pedido) VALUES ('1', '2020-02-15');


CREATE TABLE PED_ITENS
(
	Id_ped_itens INT IDENTITY(1,1) PRIMARY KEY,
	Id_Pedido INT NOT NULL,
	Id_Item INT NOT NULL,
	Qtde INT
	CONSTRAINT fk_Id_Pedido FOREIGN KEY (Id_Pedido) REFERENCES Pedidos (Id_Pedido),
	CONSTRAINT fk_Id_Item FOREIGN KEY (Id_Item) REFERENCES Item (Id_Item)
);

INSERT INTO Ped_Itens (Id_Pedido, Id_Item, Qtde) VALUES ('1', '17', '1');
INSERT INTO Ped_Itens (Id_Pedido, Id_Item, Qtde) VALUES ('2', '1', '1');
INSERT INTO Ped_Itens (Id_Pedido, Id_Item, Qtde) VALUES ('3', '5', '1');
INSERT INTO Ped_Itens (Id_Pedido, Id_Item, Qtde) VALUES ('4', '3', '1');
INSERT INTO Ped_Itens (Id_Pedido, Id_Item, Qtde) VALUES ('5', '20', '1');
INSERT INTO Ped_Itens (Id_Pedido, Id_Item, Qtde) VALUES ('6', '23', '1');
INSERT INTO Ped_Itens (Id_Pedido, Id_Item, Qtde) VALUES ('7', '30', '1');
INSERT INTO Ped_Itens (Id_Pedido, Id_Item, Qtde) VALUES ('8', '21', '1');
INSERT INTO Ped_Itens (Id_Pedido, Id_Item, Qtde) VALUES ('9', '21', '1');
INSERT INTO Ped_Itens (Id_Pedido, Id_Item, Qtde) VALUES ('10', '23', '1');
INSERT INTO Ped_Itens (Id_Pedido, Id_Item, Qtde) VALUES ('11', '3', '1');
INSERT INTO Ped_Itens (Id_Pedido, Id_Item, Qtde) VALUES ('12', '3', '1');
INSERT INTO Ped_Itens (Id_Pedido, Id_Item, Qtde) VALUES ('13', '21', '2');
INSERT INTO Ped_Itens (Id_Pedido, Id_Item, Qtde) VALUES ('14', '8', '1');
INSERT INTO Ped_Itens (Id_Pedido, Id_Item, Qtde) VALUES ('15', '2', '1');
INSERT INTO Ped_Itens (Id_Pedido, Id_Item, Qtde) VALUES ('16', '15', '1');
INSERT INTO Ped_Itens (Id_Pedido, Id_Item, Qtde) VALUES ('17', '12', '1');
INSERT INTO Ped_Itens (Id_Pedido, Id_Item, Qtde) VALUES ('18', '21', '1');
INSERT INTO Ped_Itens (Id_Pedido, Id_Item, Qtde) VALUES ('19', '13', '1');
INSERT INTO Ped_Itens (Id_Pedido, Id_Item, Qtde) VALUES ('20', '25', '1');

CREATE TABLE ESTOQUE
(
	Id_Estoque INT IDENTITY(1,1) PRIMARY KEY,
	Id_Item INT,
	Qtde INT
	CONSTRAINT fk_Id_Item_Estoque FOREIGN KEY (Id_Item) REFERENCES Item (Id_Item)
);

INSERT INTO Estoque(Id_Item, Qtde) VALUES ('1', '4');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('2', '2');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('3', '1');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('4', '5');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('5', '7');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('6', '3');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('7', '1');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('8', '5');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('9', '1');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('10', '2');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('11', '5');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('12', '8');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('13', '2');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('14', '1');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('15', '15');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('16', '5');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('17', '5');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('18', '2');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('19', '2');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('20', '6');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('21', '20');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('22', '3');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('23', '2');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('24', '1');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('25', '1');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('26', '3');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('27', '8');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('28', '2');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('29', '4');
INSERT INTO Estoque(Id_Item, Qtde) VALUES ('30', '3');		

--- COMANDO CASE 

SELECT 
	NOME, 
	PRE_UNIT, 
	PRE_UNIT*1.10 AS PRECO,
	--(PRE_UNIT * 0.10) + PRE_UNIT AS PRECO,
CASE WHEN PRE_UNIT * 1.10 <=100 THEN 'A' 
ELSE 'B' END AS CLASSIFICACAO
FROM ITEM		
--ORDER BY PRE_UNIT + 0.1 * PRE_UNIT	

--MULTIPLE ROW
--AVG
--COUNT
--MAX
--MIN
--SUM

--SINGLE ROW
--LEN
--LOWER
--UPPER
--LTRIM
--RTRIM
--SUBSTRING

--TRIM é só pra remover do início e final de palavras
  
--FUNÇÕES DE MANIPULAÇÃO DE DATA

--DATEADD
--DATEDIFF
--GETDATE()
--DATENAME
--DATEPART

SELECT
DATEADD(year,5,Dat_Nasc),
* FROM CLIENTES


SELECT
DATEDIFF(year,Dat_Nasc,getdate()),
GETDATE(),
DATENAME(month,getdate()),
DATEPART(day,getdate()),
* FROM CLIENTES

SELECT
	nome,
	Dat_Nasc,
CASE WHEB DAY (GETDATE())>= DAY (dat_nasc) AND
MONTH(GETDATE())> MONTH(dat_nasc) THEN
DATEDIFF(year,dat_nasc, GETDATE())
ELSE DATEDIFF(year,dat_nasc, GETDATE()) -1
END AS idade

SELECT * FROM CLIENTES
WHERE NOME NOT LIKE '%WILLIAM%'
AND (DATEPART(YY,Dat_Nasc) between '1970' and '1979'
	
--FUNÇÕES DE MANIPULAÇÃO COM JOIN

INNER JOIN

SELECT DISTICT NOME FROM PEDIDOS
INNER JOIN CLIENTES
ON CLIENTES.ID_CLIENTES = PEDIDOS.ID_CLIENTES

SELECT DISTICT NOME FROM PEDIDOS
LEFT JOIN CLIENTES
ON CLIENTES.ID_CLIENTES = PEDIDOS.ID_CLIENTES	

SELECT DISTICT NOME FROM PEDIDOS
RIGTH JOIN CLIENTES
ON CLIENTES.ID_CLIENTES = PEDIDOS.ID_CLIENTES	

SELECT DISTICT NOME FROM PEDIDOS
FULL JOIN CLIENTES
ON CLIENTES.ID_CLIENTES = PEDIDOS.ID_CLIENTES

--Fazer o begin trans antes do update desta forma será possivel aplicar o rollback caso esteja ok aplica o commit.
BEGIN TRANSACTION

COMMIT
ROLLBACK
UPDATE

UPDATE Ped_Itens
SET Qtde = 3 , Id_Item = 12
WHERE Id_ped_itens = 12

SELECT * FROM Ped_Itens

-- DELETE

BEGIN TRAN
    
DELETE FROM Clientes
WHERE Id_Cliente = 3

COMMIT
ROLLBACK	

-- CRIANDO VIEW

CREATE VIEW ESTOQUE_CORRETO
AS
SELECT ID_ITEM FROM ESTOQUE
WHERE QTDE >=3

SELECT *FROM ESTOQUE_CORRETO

-- CRIANDO PROCEDURE

SELECT *FROM ESTOQUE
WHERE QTDE >= 5

CREATE PROCEDURE ESTOQUE_CORRETO_PARAMETRO
@QUANTIDADE INT
AS
 
SELECT 
	ITEM.ID.ITEM,
	ITEM.NOME,
	ESTOQUE.QTDE FROM ESTOQUE
INNER JOIN Item
ON ITEM.ID_ITEM = ESTOQUE.ID_ITEM
WHERE QTDE >= @QUANTIDADE


EXEC ESTOQUE_CORRETO_PARAMETRO	

------------------- AULA07 - 17.05.2021 ----------------------------------------------------------------------------------------------------------	

CREATE TABLE [DISCIPLINAS]
(
	[ID_DICIPLINA] [INTEGER] NOT NULL,
	[DISCIPLINA] [VACHAR] (40) NOT NULL,
	[CODIGO_CURSO] [VACHAR] (40) NOT NULL,
	
	PRIMARY KEY ([ID_DICIPLINA]),
	FOREIGN KEY ([CODIGO_CURSO]) REFERENCES [CURSOS] ([CODIGO_CURSO])
)	


------------------- AULA08 - 18.05.2021 ----------------------------------------------------------------------------------------------------------	

SELECT *FROM [ITENS NOTAS FISCAIS] WHERE [QUANTIDADE] >= 60 AND [PRECO] <=3

SELECT *FROM AUTOMOVEIS
WHERE MARCA IN ('Fiat', 'Chevrolet') AND PRECO BETWEEN 25000 AND 45000


------------------- AULA09 - 19.05.2021 ----------------------------------------------------------------------------------------------------------	

SELECT [NOME], [BAIRRO], [CIDADE]
* FROM [TABELA DE CLIENTES]
ORDER BY 1


SELECT [VENDEDORES],[BAIRRO}
	CASE	
		WHEN YEAR([DATA DE VENCIMENTO]) < AGORA() THEN 'A VENCER'
		WHEN YEAR([DATA DE VENCIMENTO]) > AGORA() THEN 'VENCIDO'
		ELSE 'PAGO'
		
	END AS 'CLASSIFICACAO POR BAIRRO'

FROM [TABELA DE VENDEDORES]
ORDER BY
CASE
		WHEN YEAR([DATA DE VENCIMENTO]) < AGORA() THEN 'A VENCER'
		WHEN YEAR([DATA DE VENCIMENTO]) > AGORA() THEN 'VENCIDO'
		ELSE 'PAGO'
		
END DESC


SELECT [PRODUTO], MIN([VENDA])
FROM [TABELA PRODUTOS]
ORDER BY 2

------------------- AULA10 - 20.05.2021 ----------------------------------------------------------------------------------------------------------	
-- CASE

SELECT [NOME],
	CASE	
		WHEN YEAR([DATA DE NASCIMENTO]) < 1990 THEN 'ADULTO'
		WHEN YEAR([DATA DE NASCIMENTO]) BETWEEN 1990 AND 1995 THEN 'JOVEM'
		ELSE 'CRIANÇA'
		
	END AS 'CLASSIFICACAO POR IDADE'

FROM [TABELA DE CLIENTES]
ORDER BY
CASE
		WHEN YEAR([DATA DE NASCIMENTO]) < 1990 THEN 'ADULTO'
		WHEN YEAR([DATA DE NASCIMENTO]) BETWEEN 1990 AND 1995 THEN 'JOVEM'
		ELSE 'CRIANÇA'
		
		
END DESC

------------------- AULA11 - 21.05.2021 -- RELATÓRIOS ----------------------------------------------------------------------------------------------------------	

--PASSO 1: RELATORIO DE VENDAS VALIDAS

SELECT * FROM [TABELA DE CLIENTES]

SELECT * FROM [TABELA DE ITENS NOTAS FISCAIS]

SELECT * FROM [TABELA DE NOTAS FISCAIS]

--PASSO 2:  FACO A UNIAO DAS TABELAS QUE TEM OS VALORES QUE EU QUERO
SELECT * FROM [TABELA DE NOTAS FISCAIS] NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO


--PASSO 3:  PEGO SOMENTE OS CAMPOS QUE EU QUERO
SELECT NF.CPF, NF.DATA,INF.QUANTIDADE FROM [TABELA DE NOTAS FISCAIS] NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO


--PASSO 4: CONVERTENDO A DATA PARA STRING
SELECT NF.CPF, CONVERT (VARCHAR,NF.DATA,120) AS 'DATA',INF.QUANTIDADE FROM [TABELA DE NOTAS FISCAIS] NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO


--PASSO 5: USANDO SUBSTRING PARA PEGAR SOMENTE O ANO/MES
SELECT NF.CPF,SUBSTRING (CONVERT(VARCHAR,NF.DATA,120),1,7) AS 'ANO/MES',INF.QUANTIDADE FROM [TABELA DE NOTAS FISCAIS] NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO




--PASSO 6: AGRUPANDO PARA TER QUANTIDADE POR CPF E MÊS 
SELECT NF.CPF,SUBSTRING (CONVERT(VARCHAR,NF.DATA,120),1,7) AS 'ANO/MES', SUM (INF.QUANTIDADE) AS 'QUANTIDADE MES' FROM [TABELA DE NOTAS FISCAIS] NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
GROUP BY NF.CPF, SUBSTRING (CONVERT(VARCHAR,NF.DATA,120),1,7)



--PASSO 7: PEGAR O NOME E VOLUME DE COMPRA DA TABELA DE CLIENTE
SELECT TC.NOME,TC.[VOLUME DE COMPRA] FROM [TABELA DE CLIENTES]TC






--PASSO 8: FAZENDO SUBQUERY DA CONSULTA 
SELECT * FROM
(SELECT NF.CPF,SUBSTRING(CONVERT (VARCHAR,NF.[DATA],103),4,10) AS 'MES/ANO', SUM (INF.QUANTIDADE) AS 'QUANTIDADE MES' FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
GROUP BY  NF.CPF,SUBSTRING(CONVERT (VARCHAR,NF.[DATA],103),4,10))CQ


--PASSO 9: APLICANDO INNER JOIN COM A TABELA DE CLIENTES
SELECT * FROM
(SELECT NF.CPF,SUBSTRING(CONVERT (VARCHAR,NF.[DATA],103),4,10) AS 'MES/ANO', SUM (INF.QUANTIDADE) AS 'QUANTIDADE MES' FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
GROUP BY  NF.CPF,SUBSTRING(CONVERT (VARCHAR,NF.[DATA],103),4,10))CQ
INNER JOIN [TABELA DE CLIENTES]TC
ON TC.CPF = CQ.CPF


--PASSO 10: SELECIONADO SOMENTE AS COLUNAS NECESSARIAS
SELECT TC.NOME,CQ.[ANO/MES], CQ.[QUANTIDADE MES],TC.[VOLUME DE COMPRA]
FROM
(SELECT NF.CPF,SUBSTRING (CONVERT(VARCHAR,NF.DATA,120),1,7) AS 'ANO/MES', SUM (INF.QUANTIDADE) AS 'QUANTIDADE MES' FROM [TABELA DE NOTAS FISCAIS] NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
GROUP BY NF.CPF, SUBSTRING (CONVERT(VARCHAR,NF.DATA,120),1,7))CQ --
INNER JOIN [TABELA DE CLIENTES]TC
ON TC.CPF = CQ.CPF



--PASSO 11: ELA VAI SER OUTRA SUBQUERY
--OBSERVEM O APELIDO PESSOAL

SELECT * FROM
(SELECT TC.NOME,CQ.[ANO/MES], CQ.[QUANTIDADE MES],TC.[VOLUME DE COMPRA]
FROM
(SELECT NF.CPF,SUBSTRING (CONVERT(VARCHAR,NF.DATA,120),1,7) AS 'ANO/MES', SUM (INF.QUANTIDADE) AS 'QUANTIDADE MES' FROM [TABELA DE NOTAS FISCAIS] NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
GROUP BY NF.CPF, SUBSTRING (CONVERT(VARCHAR,NF.DATA,120),1,7))CQ --
INNER JOIN [TABELA DE CLIENTES]TC
ON TC.CPF = CQ.CPF)AUX


--PASSO 12: PEGANDO SOMENTE O QUE EU QUERO JÁ COM O CASE EMBUTIDO NO SELECT

SELECT AUX.NOME,AUX.[MES/ANO],AUX.[QUANTIDADE MES],AUX.[VOLUME DE COMPRA],
CASE
	WHEN AUX.[QUANTIDADE MES] <= AUX.[VOLUME DE COMPRA] THEN 'VENDA VÁLIDA'
	ELSE 'VENDA INVALIDA' 

END AS 'STATUS DE VENDA'
FROM
(SELECT TC.NOME,CQ.[MES/ANO], CQ.[QUANTIDADE MES],TC.[VOLUME DE COMPRA]
FROM
(SELECT NF.CPF,SUBSTRING(CONVERT (VARCHAR,NF.[DATA],103),4,10) AS 'MES/ANO', SUM (INF.QUANTIDADE) AS 'QUANTIDADE MES' FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
GROUP BY  NF.CPF,SUBSTRING(CONVERT (VARCHAR,NF.[DATA],103),4,10))CQ
INNER JOIN [TABELA DE CLIENTES]TC
ON TC.CPF = CQ.CPF)AUX



--PASSO 13: ORDANANDO PELO ORDER BY PELO NOME E MES/ANO
SELECT AUX.NOME,AUX.[MES/ANO],AUX.[QUANTIDADE MES],AUX.[VOLUME DE COMPRA],
CASE
	WHEN AUX.[QUANTIDADE MES] <= AUX.[VOLUME DE COMPRA] THEN 'VENDA VÁLIDA'
	ELSE 'VENDA INVALIDA' 

END AS 'STATUS DE VENDA'
FROM
(SELECT TC.NOME,CQ.[MES/ANO], CQ.[QUANTIDADE MES],TC.[VOLUME DE COMPRA]
FROM
(SELECT NF.CPF,SUBSTRING(CONVERT (VARCHAR,NF.[DATA],103),4,10) AS 'MES/ANO', SUM (INF.QUANTIDADE) AS 'QUANTIDADE MES' FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
GROUP BY  NF.CPF,SUBSTRING(CONVERT (VARCHAR,NF.[DATA],103),4,10))CQ
INNER JOIN [TABELA DE CLIENTES]TC
ON TC.CPF = CQ.CPF)AUX
ORDER BY AUX.NOME, AUX.[MES/ANO]





-- RESPOSTA DO DESAFIO DO RELATORIO DE VENDA ---------

SELECT AUX.NOME, AUX.[ANO/MES],AUX.[QUANTIDADE MES],AUX.[VOLUME DE COMPRA], 
 ROUND ((1 -(AUX.[VOLUME DE COMPRA]/AUX.[QUANTIDADE MES])) * 100,2)  AS 'PERCENTUAL',


	CASE
		WHEN AUX.[QUANTIDADE MES] <= AUX.[VOLUME DE COMPRA] THEN 'VENDA VÁLIDA'
		ELSE 'VENDA INVALIDA'
	END AS 'STATUS VENDA'
FROM
(SELECT TC.NOME,CQ.[ANO/MES], CQ.[QUANTIDADE MES],TC.[VOLUME DE COMPRA]
FROM
(SELECT NF.CPF,SUBSTRING (CONVERT(VARCHAR,NF.DATA,120),1,7) AS 'ANO/MES', SUM (INF.QUANTIDADE) AS 'QUANTIDADE MES' FROM [TABELA DE NOTAS FISCAIS] NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
GROUP BY NF.CPF, SUBSTRING (CONVERT(VARCHAR,NF.DATA,120),1,7))CQ
INNER JOIN [TABELA DE CLIENTES]TC
ON TC.CPF = CQ.CPF)AUX
WHERE  AUX.[QUANTIDADE MES] > AUX.[VOLUME DE COMPRA]
ORDER BY AUX.NOME,AUX.[ANO/MES]



--O  dono da esquina do suco pediu para que mostrasse um relatório mostrando,
--qual foi o  faturamento em dinheiro por sabor de produto e também compararmos 
--a participação daquela venda em relação ao total.
--Somente no ano de 2016

----------------- Relatório de Venda por Sabor -----------------------------



SELECT AUX1.SABOR, AUX1.ANO,ROUND (AUX1.FATURAMENTO,2) AS 'FATURAMENTO', CONVERT(VARCHAR,ROUND((AUX1.FATURAMENTO/AUX2.[FATURAMENTO ANUAL])*100,2))+' %' AS 'PERCENTUAL' FROM
(SELECT TP.SABOR, YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY TP.SABOR, YEAR (NF.DATA))AUX1
INNER JOIN (SELECT  YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO ANUAL' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY YEAR (NF.DATA))AUX2
ON AUX1.ANO = AUX2.ANO
ORDER BY AUX1.FATURAMENTO DESC

----------------------  PASSO A PASSO --------------------------------------------

--PASSO1: PEGANDO AS TABELAS 
SELECT * FROM [TABELA DE PRODUTOS]

SELECT * FROM [TABELA DE NOTAS FISCAIS]

SELECT * FROM [TABELA DE ITENS NOTAS FISCAIS]


--PASSO 2: PEGANDO OS CAMPOS
SELECT TP.SABOR FROM [TABELA DE PRODUTOS]TP

SELECT NF.DATA FROM [TABELA DE NOTAS FISCAIS]NF

SELECT (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF


--PASSO 3: JUNTANDO AS TABELAS
SELECT TP.SABOR, NF.DATA,(INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]


--PASSO 4: FILTRANDO PELA DATA E DANDO NOME AS COLUNAS 
SELECT TP.SABOR, YEAR (NF.DATA) AS 'ANO', (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016



--PASSO 5: AGRUPANDO
SELECT TP.SABOR, YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY TP.SABOR, YEAR (NF.DATA)


-- PASSO 6: AGRUPANDO O FATURAMENTO ANUAL (TIRO O CAMPO SABOR) 
SELECT  YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY YEAR (NF.DATA)




--SELECT'CAMPO1' ,'CAMPO2' FROM [TABELA DE PRODUTOS]

--PASSO 7: INNER JOIN NAS DUAS CONSULTAS 
SELECT * FROM
(SELECT TP.SABOR, YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY TP.SABOR, YEAR (NF.DATA))AUX1

INNER JOIN 

(SELECT  YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY YEAR (NF.DATA))AUX2

ON AUX1.ANO = AUX2.ANO




-- PASSO 8: MUDANDO O NOME DO FATURAMENTO DO AUX2 PARA 'FATURAMENTO ANUAL'
SELECT AUX1.SABOR, AUX1.ANO,AUX1.FATURAMENTO,AUX2.[FATURAMENTO ANUAL] FROM
(SELECT TP.SABOR, YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY TP.SABOR, YEAR (NF.DATA))AUX1
INNER JOIN (SELECT  YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO ANUAL' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY YEAR (NF.DATA))AUX2
ON AUX1.ANO = AUX2.ANO


-- PASSO 9: CRIANDO O PERCENTUAL

SELECT AUX1.SABOR, AUX1.ANO,AUX1.FATURAMENTO,(AUX1.FATURAMENTO/AUX2.[FATURAMENTO ANUAL])*100 AS 'PERCENTUAL' FROM
(SELECT TP.SABOR, YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY TP.SABOR, YEAR (NF.DATA))AUX1
INNER JOIN (SELECT  YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO ANUAL' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY YEAR (NF.DATA))AUX2
ON AUX1.ANO = AUX2.ANO



--PASSO 10: ORDENANDO PELO FATURAMENTO (AUX1)
SELECT AUX1.SABOR, AUX1.ANO,AUX1.FATURAMENTO,(AUX1.FATURAMENTO/AUX2.[FATURAMENTO ANUAL])*100 AS 'PERCENTUAL' FROM
(SELECT TP.SABOR, YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY TP.SABOR, YEAR (NF.DATA))AUX1
INNER JOIN (SELECT  YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO ANUAL' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY YEAR (NF.DATA))AUX2
ON AUX1.ANO = AUX2.ANO
ORDER BY AUX1.FATURAMENTO DESC


--PASSO 11: CONVERTENDO E ARRENDONDANDO CAMPOS (FINALIZANDO O RELATÓRIO)

SELECT AUX1.SABOR, AUX1.ANO,ROUND (AUX1.FATURAMENTO,2) AS 'FATURAMENTO', CONVERT(VARCHAR,ROUND((AUX1.FATURAMENTO/AUX2.[FATURAMENTO ANUAL])*100,2))+' %' AS 'PERCENTUAL' FROM
(SELECT TP.SABOR, YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY TP.SABOR, YEAR (NF.DATA))AUX1
INNER JOIN (SELECT  YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO ANUAL' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY YEAR (NF.DATA))AUX2
ON AUX1.ANO = AUX2.ANO
ORDER BY AUX1.FATURAMENTO DESC



SELECT AUX1.SABOR, AUX1.ANO, FORMAT(CONVERT(DECIMAL(15,2),AUX1.FATURAMENTO),'C','PT-BR') AS 'FATURAMENTO', CONVERT(VARCHAR,ROUND((AUX1.FATURAMENTO/AUX2.[FATURAMENTO ANUAL])*100,2))+' %' AS 'PERCENTUAL' FROM
(SELECT TP.SABOR, YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY TP.SABOR, YEAR (NF.DATA))AUX1
INNER JOIN (SELECT  YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO ANUAL' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY YEAR (NF.DATA))AUX2
ON AUX1.ANO = AUX2.ANO
ORDER BY AUX1.FATURAMENTO DESC



--OUTRA RESPOSTA COM O FORMAT PARA MOEDA E COM DUAS CASAS DECIMAIS E COM DECIMAL APARECENDO O ZERO NA FORMATACAO DO DECIMAL 'X,10'
--DA DOCUMENTACAO MICROSOFT SOBRE O FORMAT 
 			-- FORMAT(<O NUMERO AQUI>, 'N', 'PT-BR') AS 'Number Format' (FORMATO NUMERICO)
            -- FORMAT(<O NUMERO AQUI>, 'G', 'PT-BR') AS 'General Format'  (FORMATO GERAL)
            -- FORMAT<(O NUMERO AQUI>, 'C', 'PT-BR') AS 'Currency Format'  (FORMATO MOEDA)


SELECT AUX1.SABOR, AUX1.ANO, FORMAT(AUX1.FATURAMENTO,'C','PT-BR') AS 'FATURAMENTO', CONVERT(VARCHAR,ROUND((AUX1.FATURAMENTO/AUX2.[FATURAMENTO ANUAL])*100,2))+' %' AS 'PERCENTUAL' FROM
(SELECT TP.SABOR, YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY TP.SABOR, YEAR (NF.DATA))AUX1
INNER JOIN (SELECT  YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO ANUAL' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY YEAR (NF.DATA))AUX2
ON AUX1.ANO = AUX2.ANO
ORDER BY AUX1.FATURAMENTO DESC

------------------- AULA12 - 24.05.2021 ----------------------------------------------------------------------------------------------------------	

FUNÇÕES DE STRING

LTRIM - Retorna uma expressão de caracteres depois de trucar todos os espaços à esquerda

RTRIM - Retorna uma expressão de caracteres depois de trucar todos os espaços à direita

RIGTH - Retorna a parte direita de uma cadeia de caracteres com números caracteres especificado

CONCAT - Concatenar.

SUBSTRING (expressão, início, tamanho) - Retorna parte de uma expressão de caracteres, binárias, de texto ou de imagem no SQL Server.

LEN (expressão de caracteres) 

UPPER (Coloca as letras minúsculas em maiúsculas) o oposto LOWER

SELECT NOME, CONCAT(ENDERECO,' ',BAIRRO,' ',CIDADE,' ', ESTADO) AS 'ENDERÇO COMPLETO'
FROM [TABELA DE CLIENTES]


SELECT DATEDIFF (YEAR,DATEFROMPARTS(2020,5,1),GETDATE())


SELECT NOME, DATEDIFF(YEAR,[DATA DE NASCIMENTO],GETDATE()) AS 'IDADE' FROM [TABELA DE CLIENTES]


SELECT YEAR([DATA]) AS 'ANO', FORMAT(FLOOR (SUM(IMPOSTO*(QUANTIDADE*PRECO))),'#,###.##','PT-BR') AS 'IMPOSTO PAGO' 
FROM [TABELA DE NOTAS FISCAIS] NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
WHERE YEAR([DATA]) = 2016
GROUP BY YEAR([DATA])



------------------- AULA13 - 25.05.2021 ----------------------------------------------------------------------------------------------------------	

SELECT YEAR([DATA]) AS 'ANO', [NOME], [VOLUME DE COMPRA],FORMAT(FLOOR (SUM(QUANTIDADE*PRECO)),'#,###.##','PT-BR') AS 'FATURADO'
FROM [TABELA DE NOTAS FISCAIS] NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
INNER JOIN [TABELA DE CLIENTES] CL
ON NF.CPF = CL.CPF
WHERE YEAR([DATA]) = 2016
GROUP BY YEAR([DATA])

------------------- AULA14 - 26.05.2021 ----------------------------------------------------------------------------------------------------------

CREATE TABLE T_PESSOA(
  COD_PESSOA NUMBER(7) PRIMARY KEY,
  UF CHAR(2),
  IDADE NUMBER(2),
  STATUS NUMBER(1)
)

-- A Listagem 2 mostra o script para criar uma restrição check que faz com que o campo UF só aceite estados da região Sudeste. 
-- O formato da instrulção é o seguinte: primeiro você deve escrever a instrução ALTER TABLE ADD CONSTRAINT seguida do nome que você deseja para 
-- a restrição (no exemplo, o nome escolhido foi “ck_uf”). Depois você escreve a palavra CHECK e define a regra para a restrição entre parênteses. 
-- No exemplo da listagem 2, a regra é: o campo “uf” só deve aceitar valores que façam parte do conjunto (‘RJ’, ‘SP’, ‘MG’, ‘ES’).

ALTER TABLE T_PESSOA
ADD CONSTRAINT ck_uf
CHECK (uf IN (‘RJ’,’SP’,’MG’,’ES’));

ALTER TABLE T_PESSOA
ADD CONSTRAINT ck_idade
CHECK (idade > 17);

ALTER TABLE T_PESSOA
ADD CONSTRAINT ck_composta
CHECK (status > 0 AND uf=’RJ’);

-- Para apagar uma constraint, é necessário utilizar a instrução ALTER TABLE com a cláusula DROP CONSTRAINT

ALTER TABLE T_PESSOA
DROP CONSTRAINT ck_composta;

------------------- AULA15 - 27.05.2021 ----------------------------------------------------------------------------------------------------------

SELECT message_id AS Error, severity AS Severity,  
[Event Logged] = CASE is_event_logged WHEN 0 THEN 'No' ELSE 'Yes' END,
text AS [Description]
FROM sys.messages
WHERE language_id = <desired language, such as 1033 for US English>
ORDER BY message_id

------------- AULA16 - 28.05.2021-----------------------------------------------------------------------------------------------------------------

DECLARE @DATAINICIAL DATE
DECLARE @DATAFINAL DATE
DECLARE @NUMNOTAS INT
SET @DATAINICIAL = '20170101'
SET @ DATAFINAL = '20170110'
WHILE @DATAINICIAL <= @DATAFINAL
BEGIN
	SELECT @NUMNOTAS = COUNT(*) FROM [TABELA DE NOTAS FISCAIS]
	WHERE DATA = @DATAINICIAL
	
	PRINT CONVERT(VARCHAR(10), @DATAINICIAL) + '-->' + CONVERT(VARCHAR(10), @NUMNOTAS)
	SELECT @DATAINICIAL = DATEADD(DAY, 1,@DATAINICIAL)
	
END

	
	